<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="codeInvalid" xml:space="preserve">
    <value>Invalid code</value>
  </data>
  <data name="codeRequired" xml:space="preserve">
    <value>Code is required</value>
  </data>
  <data name="eMail" xml:space="preserve">
    <value>eMail address</value>
  </data>
  <data name="eMailInvalid" xml:space="preserve">
    <value>eMail is invalid</value>
  </data>
  <data name="eMailRequired" xml:space="preserve">
    <value>eMail is required</value>
  </data>
  <data name="newPassword" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="newPasswordRequired" xml:space="preserve">
    <value>New password is required</value>
  </data>
  <data name="password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="passwordConfirmation" xml:space="preserve">
    <value>Password confirmation</value>
  </data>
  <data name="passwordConfirmationInvalid" xml:space="preserve">
    <value>Password confirmation is invalid</value>
  </data>
  <data name="passwordConfirmationRequired" xml:space="preserve">
    <value>Password confirmation is Required</value>
  </data>
  <data name="passwordInvalid" xml:space="preserve">
    <value>Password is invalid</value>
  </data>
  <data name="passwordRequired" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="rememberBrowser" xml:space="preserve">
    <value>Remember my browser</value>
  </data>
  <data name="rememberMe" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="rememberPassword" xml:space="preserve">
    <value>Remember my password</value>
  </data>
  <data name="aboutUs" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="comparePasswordInvalid" xml:space="preserve">
    <value>The password and the password confirm doesn't match</value>
  </data>
  <data name="contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="login" xml:space="preserve">
    <value>Log In</value>
  </data>
  <data name="register" xml:space="preserve">
    <value>Registrer</value>
  </data>
  <data name="bannerBtn" xml:space="preserve">
    <value>FIND A TRAIN</value>
  </data>
  <data name="bannerTitle" xml:space="preserve">
    <value>Choose your train.
Quickly and cheaper.</value>
  </data>
  <data name="bannerTxt" xml:space="preserve">
    <value>aaaaa</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed, fermentum et sem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Morbi posuere dignissim nisl fringilla maximus. Maecenas rutrum pellentesque mollis. Proin gravida diam ac urna mattis, consectetur volutpat lectus sodales. Donec aliquam dictum lobortis. Suspendisse arcu lacus, eleifend a sagittis ac, bibendum non sem.</value>
  </data>
  <data name="reserveTitle" xml:space="preserve">
    <value>Book a train ticket</value>
  </data>
  <data name="oneWayTicket" xml:space="preserve">
    <value>One way ticket</value>
  </data>
  <data name="roundTrip" xml:space="preserve">
    <value>Round trip</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ut convallis erat. Donec turpis urna, molestie in ornare sed,</value>
  </data>
  <data name="whatIs" xml:space="preserve">
    <value>What is Train Commander?</value>
  </data>
  <data name="how1" xml:space="preserve">
    <value>Choose options</value>
  </data>
  <data name="how2" xml:space="preserve">
    <value>Compare offer</value>
  </data>
  <data name="how3" xml:space="preserve">
    <value>Command your choice</value>
  </data>
  <data name="how4" xml:space="preserve">
    <value>Register </value>
  </data>
  <data name="arrival" xml:space="preserve">
    <value>Arrival</value>
  </data>
  <data name="arrivalItem" xml:space="preserve">
    <value>Arrival at</value>
  </data>
  <data name="depart" xml:space="preserve">
    <value>Depart</value>
  </data>
  <data name="departure" xml:space="preserve">
    <value>Departure</value>
  </data>
  <data name="departureItem" xml:space="preserve">
    <value>Departure at</value>
  </data>
  <data name="returnId" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="promos" xml:space="preserve">
    <value>Promotions</value>
  </data>
  <data name="reserv" xml:space="preserve">
    <value>Reservation</value>
  </data>
  <data name="trip" xml:space="preserve">
    <value>Trip</value>
  </data>
</root>